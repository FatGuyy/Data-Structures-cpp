[33mcommit f1d88c3a9a87d95fb1f0a2bfb13c23e0cee9046f[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: FatGuyy <omkarjadhav2103@gmail.com>
Date:   Thu Dec 29 17:31:37 2022 +0530

    Added array.

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..f20d1cb[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m*[m
[32m+[m[32m!/**/[m
[32m+[m[32m!*.*[m
\ No newline at end of file[m
[1mdiff --git a/array b/array[m
[1mnew file mode 100755[m
[1mindex 0000000..6459c0b[m
Binary files /dev/null and b/array differ
[1mdiff --git a/array.cpp b/array.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..4c087ae[m
[1m--- /dev/null[m
[1m+++ b/array.cpp[m
[36m@@ -0,0 +1,61 @@[m
[32m+[m[32m#include<iostream>[m
[32m+[m
[32m+[m[32mtemplate<typename T>class array{[m
[32m+[m[32m    private:[m
[32m+[m[32m        T* ptr;[m
[32m+[m[32m        int size;[m
[32m+[m[41m    [m
[32m+[m[32m    public:[m
[32m+[m[32m        array(int size){[m
[32m+[m[32m            this->size = size;[m
[32m+[m[32m            ptr = new T[size];[m
[32m+[m[32m        }[m
[32m+[m[32m        void append(T data){[m
[32m+[m[32m            int count = 0;[m
[32m+[m[32m            T i = *(ptr + count);[m
[32m+[m[32m            while(i!='\0'){[m
[32m+[m[32m                count++;[m
[32m+[m[32m            }[m
[32m+[m[32m            *(ptr + count) = data;[m
[32m+[m[32m        }[m
[32m+[m[32m        void print(){[m
[32m+[m[32m            for(int i = 0; i<size; i++){[m
[32m+[m[32m                std::cout<<" "<<*(ptr+i);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        T len(){[m
[32m+[m[32m            return(size);[m
[32m+[m[32m        }[m
[32m+[m[32m        T sort(){[m
[32m+[m[32m            // Quick sort is the fastest one. Implement that.[m
[32m+[m[32m            // Partition function[m
[32m+[m[32m            T partition(T* arr, int begin, int end){[m
[32m+[m
[32m+[m[32m                int count = 0;[m
[32m+[m[32m                for(int i = begin; i<=end; i++){[m
[32m+[m[32m                    if (arr[i] <= pivot){[m
[32m+[m[32m                        count++;[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                int pivot = count + begin;[m
[32m+[m[32m                // int pivotIndex = begin + count;[m
[32m+[m[32m                while( begin < pivot && end > pivot){[m
[32m+[m[32m                    continue;[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // quick function[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m[41m    [m
[32m+[m[32m    array<int> arr(5);[m
[32m+[m[32m    arr.append(1);[m
[32m+[m[32m    arr.print();[m
[32m+[m
[32m+[m[32mreturn 0;[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/binary_Tree/bTree b/binary_Tree/bTree[m
[1mnew file mode 100755[m
[1mindex 0000000..b93ca63[m
Binary files /dev/null and b/binary_Tree/bTree differ
[1mdiff --git a/binary_Tree/bTree.cpp b/binary_Tree/bTree.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..2550785[m
[1m--- /dev/null[m
[1m+++ b/binary_Tree/bTree.cpp[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#include "bTree.h"[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m[32m    node* root = new node(1);[m
[32m+[m[32m    root->left=new node(2);[m
[32m+[m[32m    root->right=new node(3);[m
[32m+[m[32m    root->left->left=new node(4);[m
[32m+[m
[32m+[m[32m    root->right->left = new node(5);[m
[32m+[m[32m    root->right->right = new node(6);[m
[32m+[m
[32m+[m[32m    root->right->right->left = new node(7);[m
[32m+[m[32m    root->right->right->left->left = new node(9);[m
[32m+[m[32m    root->right->right->left->left->left  = new node(10);[m
[32m+[m[32m    root->right->right->right = new node(8);[m
[32m+[m[32m    // std::cout<<"This is size :"<<sizeof(root)<<std::endl;[m
[32m+[m
[32m+[m[32m    print(root);[m
[32m+[m[32mreturn 0;[m
[32m+[m[32m}[m
[1mdiff --git a/binary_Tree/bTree.h b/binary_Tree/bTree.h[m
[1mnew file mode 100644[m
[1mindex 0000000..e697bef[m
[1m--- /dev/null[m
[1m+++ b/binary_Tree/bTree.h[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32m#include<bits/stdc++.h>[m
[32m+[m
[32m+[m[32mclass node[m
[32m+[m[32m{[m
[32m+[m[32mpublic:[m
[32m+[m[32m    int data;[m
[32m+[m[32m    node* left;[m
[32m+[m[32m    node* right;[m
[32m+[m
[32m+[m[32m    node(int val){[m
[32m+[m[32m        data = val;[m
[32m+[m[32m        left=NULL;[m
[32m+[m[32m        right=NULL;[m
[32m+[m[32m    }[m
[32m+[m[32m    void append(std::string s, int data){[m
[32m+[m[32m        if(s=="left")[m
[32m+[m[32m        {[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mvoid print(node* sample){[m
[32m+[m[32m    std::cout<<sample->data<<std::endl;[m
[32m+[m[32m    if (sample->left!=NULL)[m
[32m+[m[32m        print(sample->left);[m
[32m+[m[32m    if (sample->right!=NULL)[m
[32m+[m[32m        print(sample->right);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid insert(node* address,int data){[m
[32m+[m[32m    //Insert at left as default.[m
[32m+[m[32m    if (address == NULL){[m
[32m+[m[32m        address->left=new node(data);[m[41m [m
[32m+[m[32m    }[m
[32m+[m[32m    //move everthing to a lower level, don't do copy paste shit.[m
[32m+[m[32m    node* root2 = new node(address->data);[m
[32m+[m[32m    if (address->left!=NULL){[m
[32m+[m[32m        if (address->left!=NULL){[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m[32m    }[m[41m [m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/linked_lists/link_list b/linked_lists/link_list[m
[1mnew file mode 100755[m
[1mindex 0000000..9b60843[m
Binary files /dev/null and b/linked_lists/link_list differ
[1mdiff --git a/linked_lists/linked_lists.cpp b/linked_lists/linked_lists.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..275afb4[m
[1m--- /dev/null[m
[1m+++ b/linked_lists/linked_lists.cpp[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m#include "list.h"[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m[32m    list* head = new list(1);[m
[32m+[m[32m    head->append(2);[m
[32m+[m[32m    head->append(3);[m
[32m+[m[32m    head->append(4);[m
[32m+[m[32m    insert(head,head->next,420);[m
[32m+[m[32m    print(head);[m
[32m+[m[41m    [m
[32m+[m[32mreturn 0;[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/linked_lists/list.h b/linked_lists/list.h[m
[1mnew file mode 100644[m
[1mindex 0000000..e524f98[m
[1m--- /dev/null[m
[1m+++ b/linked_lists/list.h[m
[36m@@ -0,0 +1,97 @@[m
[32m+[m[32m#include<bits/stdc++.h>[m
[32m+[m
[32m+[m[32mclass list{[m
[32m+[m[32m    public:[m
[32m+[m[32m        int data;[m
[32m+[m[32m        list* next;[m
[32m+[m[32m        // node* tail; points to the last block of the list[m
[32m+[m[32m        list(int val){[m
[32m+[m[32m            data = val;[m
[32m+[m[32m            next = NULL;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        void append(int val){[m
[32m+[m[32m            list* last = next;[m
[32m+[m[32m            if(next==NULL){[m
[32m+[m[32m                next = new list(val);[m
[32m+[m[32m            }[m
[32m+[m[32m            else{[m
[32m+[m[32m                while (last->next!=NULL)[m
[32m+[m[32m                {[m
[32m+[m[32m                    last = last->next;[m
[32m+[m[32m                }[m
[32m+[m[32m                last->next = new list(val);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mvoid print(list* root){[m
[32m+[m[32m    std::cout<<root->data<<std::